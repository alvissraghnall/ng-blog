# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

enum Category {
  CINEMA
  CUISINE
  DIY
  FASHION
  LIFESTYLE
  TECHNOLOGY
  TRAVEL
}

type Comment {
  """Author of blog comment"""
  author: User!

  """Comment ID"""
  id: Int!

  """Comment likes"""
  likes: [Like!]!

  """Post that was commented on"""
  post: Post!
  text: String!
}

input CreateCommentInput {
  """ID of Post that was commented on"""
  postId: Int!

  """Comment text content"""
  text: String!
}

input CreateLikeInput {
  """Comment with like"""
  commentId: Int

  """Post with like"""
  postId: Int
}

input CreatePostInput {
  """Blog post content"""
  category: Category!

  """Blog post content"""
  content: String!

  """Blog post description"""
  desc: String!

  """Blog post image"""
  image: String!

  """Blog post title"""
  title: String!
}

input CreateUserInput {
  """User display photo (avatar)"""
  avatar: String

  """User confirm password"""
  confirmPassword: String!

  """User email address"""
  email: String!

  """User password"""
  password: String!

  """Username"""
  username: String!
}

enum EntityOwnsLike {
  COMMENT
  POST
}

type Like {
  """Comment that was liked"""
  comment: Comment

  """Likes Collection ID"""
  id: Int!
  owner: User!

  """Post that was liked"""
  post: Post
}

type LoginResponse {
  access_token: String!
  user: User!
}

input LoginUserInput {
  password: String!
  username: String!
}

type Mutation {
  createComment(createCommentInput: CreateCommentInput!): Comment!
  createLike(createLikeInput: CreateLikeInput!): Like!
  createPost(createPostInput: CreatePostInput!): Post!
  login(loginUserInput: LoginUserInput!): LoginResponse!
  removeComment(id: Int!): Comment!
  removeLike(id: Int!): Like!
  removePost(id: Int!): Post!
  removeUser(id: Int!): User!
  signup(createUserInput: CreateUserInput!): User!
  updateComment(updateCommentInput: UpdateCommentInput!): Comment!
  updatePost(updatePostInput: UpdatePostInput!): Post!
  updateUser(updateUserInput: UpdateUserInput!): User!
}

type Post {
  """Owner of posts"""
  author: User!

  """Blog post content"""
  category: String!

  """Comments on post"""
  comments: [Comment!]!

  """Blog post content"""
  content: String!

  """Blog post description"""
  desc: String!

  """Blog Post ID"""
  id: Int!

  """Blog post image"""
  image: String!

  """Likes on post"""
  likes: [Like!]!

  """Blog Post Title"""
  title: String!
}

type Query {
  auth: String!
  comment(id: Int!): Comment!
  comments(postId: Int!): [Comment!]!
  like(id: Int!): Like!
  likes(entity: EntityOwnsLike!, id: Int!): [Like!]!
  post(id: Int!): Post!
  posts(cat: Category): [Post!]
  user(username: String!): User!
  users: [User!]!
}

input UpdateCommentInput {
  """ID of comment to be updated."""
  id: Int!

  """Comment text content"""
  text: String!
}

input UpdatePostInput {
  """Blog post content"""
  category: Category

  """Blog post content"""
  content: String

  """Blog post description"""
  desc: String

  """Post id to be updated."""
  id: Int!

  """Blog post image"""
  image: String

  """Blog post title"""
  title: String
}

input UpdateUserInput {
  """User display photo (avatar)"""
  avatar: String

  """User confirm password"""
  confirmPassword: String

  """User email address"""
  email: String
  id: ID!

  """User password"""
  password: String

  """Username"""
  username: String
}

type User {
  avatar: String
  email: String!

  """ID"""
  id: String!
  username: String!
}